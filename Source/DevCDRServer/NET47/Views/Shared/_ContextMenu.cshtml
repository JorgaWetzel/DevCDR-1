<script type="text/javascript">
    $(function () {
        $.contextMenu({
            selector: '#test',
            items: {
                "foldInv": {
                    "name": "Inventory",
                    "items": {
                        "invDef": {
                            "name": "Defender",
                            "items": {
                                "invDevRT": {
                                    "name": "Realtime Scan Status",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('if((Get-MpComputerStatus).RealTimeProtectionEnabled) { "Realtime:enabled" } else { "Realtime:disabled"  }', 'DefenderStatus');
                                    }
                                },
                                "invDevSig": {
                                    "name": "Signature Version",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-MpComputerStatus).AntispywareSignatureVersion', 'SignatureVersion');
                                    }
                                },
                                "invDevSigAge": {
                                    "name": "Signature Age (days)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-MpComputerStatus).AntispywareSignatureAge', 'SignatureAge');
                                    }
                                },
                                "invDevQuickAge": {
                                    "name": "Quick Scan Age (days)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-MpComputerStatus).QuickScanAge', 'QuickScanAge');
                                    }
                                },
                                "invDevFullAge": {
                                    "name": "Full Scan Age (days)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-MpComputerStatus).FullScanAge', 'FullScanAge');
                                    }
                                },
                                "invDevThreadHist": {
                                    "name": "Thread History",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Get-MpThreat | ConvertTo-Json', 'GetThreadHistory');
                                    }
                                },
                                "invDevMalHist": {
                                    "name": "Thread and Malware History",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Get-MpThreatDetection | ConvertTo-Json', 'GetMalwHistory');
                                    }
                                }
                            }
                        },
                        "invHW": {
                            "name": "Hardware",
                            "items": {
                                "invHWBIOSVer": {
                                    "name": "BIOS Version",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_BIOS).SMBIOSBIOSVersion', 'BIOSVersion');
                                    }
                                },
                                "invHWMemory": {
                                    "name": "Memory(GB)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('[math]::Round((Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory/1GB)', 'Memory');
                                    }

                                },
                                "invHWModel": {
                                    "name": "Hardware Model",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_ComputerSystem).Model', 'HWModel');
                                    }

                                },
                                "invHWSerial": {
                                    "name": "Serial Number",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_BIOS).SerialNumber', 'SerialNr');
                                    }
                                },
                                "invHWProc": {
                                    "name": "Processor",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-WMIObject -class Win32_Processor).Name', 'Processor');
                                    }
                                },
                                "invHWUUID": {
                                    "name": "UUID",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_ComputerSystemProduct).UUID', 'UUID');
                                    }
                                },
                                "invHWTPM": {
                                    "name": "TPM Status",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Get-Tpm | select TPMPresent, TPMReady, LockedOut | ConvertTo-Json', 'GetTPMStatus');
                                    }
                                },
                            }
                        },
                        "invOS": {
                            "name": "OperatingSystem",
                            "items": {
                                "invOSCSize": {
                                    "name": "Disk C: Size (GB)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('[math]::Round((Get-WmiObject Win32_LogicalDisk -Filter "DeviceID=\'C:\'").size/1GB)', 'CSize');
                                    }
                                },
                                "invOSCFree": {
                                    "name": "Disk C: Free (GB)",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('[math]::Round((Get-WmiObject Win32_LogicalDisk -Filter "DeviceID=\'C:\'").FreeSpace/1GB)', 'CFree');
                                    }
                                },
                                "invOSInstDate": {
                                    "name": "Install Date",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_OperatingSystem).InstallDate.tostring("yyyy-MM-dd HH:mm")', 'InstallDate');
                                    }
                                },
                                "invOSMUI": {
                                    "name": "MUI Languages",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-CimInstance -ClassName Win32_OperatingSystem).MUILanguages | ConvertTo-Json', 'MUI');
                                    }
                                },
                                "invOSPS": {
                                    "name": "PowerShell Version",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('$PSVersionTable.PSVersion', 'PSVer');
                                    }
                                },
                                "invOSUser": {
                                    "name": "User",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(quser) -replace "\s{2,}", "," -replace "\u003e","" | ConvertFrom-Csv |  ConvertTo-Json', 'QueryUsers');
                                    }
                                },
                                "invOSTimeZone": {
                                    "name": "Time Zone",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-TimeZone).StandardName', 'GetTimeZone');
                                    }
                                },
                                "invOSBitlocker": {
                                    "name": "BitLocker Status",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Get-BitLockerVolume | select MountPoint, ProtectionStatus | ConvertTo-Json', 'GetBitLockerStatus');
                                    }
                                },
                                "invOSSecBoot": {
                                    "name": "SecureBoot Status",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('try{if(Confirm-SecureBootUEFI) { "Secureboot:Enabled" } else { "SecureBoot:Disabled" }} catch { "Non-UEFI" }', 'GetSecBootStatus');
                                    }
                                },
                                "invOSBuild": {
                                    "name": "Win10 Build",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(Get-ItemProperty -Path "HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion" -Name ReleaseID -ea SilentlyContinue).ReleaseID', 'GetW10Build');
                                    }
                                }
                            }
                        },
                        "invSW": {
                            "name": "Software",
                            "items": {

                            }
                        },
                        "invUpd": {
                            "name": "Updates",
                            "items": {
                                "invUpdOS": {
                                    "name": "missing OS Updates",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPSFile('~/App_Data/PSScripts/GetMissingOSUpdates.ps1', 'GetMissingOSUpdates');
                                    }
                                },
                                "invUpdDrv": {
                                    "name": "missing Driver Updates",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPSFile('~/App_Data/PSScripts/GetDriverUpdates.ps1', 'GetDriverUpdates');
                                    }
                                }
                            }
                        }
                    }
                },
                "foldActions": {
                    "name": "Actions",
                    "items": {
                        "actDef": {
                            "name": "Defender",
                            "items": {
                                "actDevQScan": {
                                    "name": "Run Quick Scan",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Start-MpScan -ScanType QuickScan', 'QuickScan');
                                    }
                                },
                                "actDevFScan": {
                                    "name": "Run Full Scan",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Start-MpScan -ScanType FullScan', 'FullScan');
                                    }
                                },
                                "actDevUpd": {
                                    "name": "Update Definitions",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Update-MpSignature', 'UpdSignature');
                                    }
                                },
                                "actDevFW": {
                                    "name": "reset Firewall to default",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('netsh advfirewall reset', 'FWReset');
                                    }
                                }
                            }
                        },
                        "actOS": {
                            "name": "OS",
                            "items": {
                                "actOSLogoff": {
                                    "name": "Logoff all users",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('(gwmi win32_operatingsystem).Win32Shutdown(4);""', 'Logoff...');
                                    }
                                },
                                "actOSRestart": {
                                    "name": "Restart Computer",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Restart-Computer -Force', 'Restart...');
                                    }
                                },
                                "actOSShutdown": {
                                    "name": "Shutdown Computer",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Stop-Computer -Force', 'Shutdown...');
                                    }
                                }
                            }
                        },
                        "actRZ": {
                            "name": "RuckZuck",
                            "items": {
                                "actRZScan": {
                                    "name": "List missing Updates",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        Command('GetRZUpdates', '');
                                    }
                                },
                                "actRZUpdate": {
                                    "name": "Install missing Updates",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        Command('InstallRZUpdates', '');
                                    }
                                },
                                "actRZInstall": {
                                    "name": "Install a RuckZuck Package...",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        $('#msgRZ').modal('show');
                                    }
                                }
                            }
                        },
                        "actUpd": {
                            "name": "Updates",
                            "items": {
                                "actUpdDrv": {
                                    "name": "Update Drivers",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPSFile('~/App_Data/PSScripts/UpdateDrivers.ps1', 'UpdateDrivers');
                                    }
                                },
                                "actUpdOS": {
                                    "name": "Update Windows",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPSFile('~/App_Data/PSScripts/UpdateWindows.ps1', 'UpdateWindows');
                                    }
                                }
                            }
                        },
                        "actSec": {
                            "name": "Security",
                            "items": {
                                "actSecGetUser": {
                                    "name": "Get active User",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-cog" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('"User: " +(get-process -includeusername explorer).UserName', 'Get User...');
                                    }
                                },
                                "sep1": "---------",
                                "actSecAddAdmin": {
                                    "name": "Make active User an Admin",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Add-LocalGroupMember -SID "S-1-5-32-544" -Member ((get-process -includeusername explorer).UserName);(get-process -includeusername explorer).UserName + " is now Admin.."', 'Add User to Admins');
                                    }
                                },
                                "actSecRemAdmin": {
                                    "name": "Remove all local Admins",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Get-LocalGroupMember -SID  "S-1-5-32-544" | % { Remove-LocalGroupMember -SID "S-1-5-32-544" -Member $_.Name };"local Admins cleaned"', 'remove Admins...');
                                    }
                                },
                                "sep2": "---------",
                                "actSecDisAdmin": {
                                    "name": "Disable local Administrator",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Disable-LocalUser -SID S-1-5-21-2353998497-988216273-596580639-500;"Admin disabled"', 'disable local Admin...');
                                    }
                                },
                                "actSecEnAdmin": {
                                    "name": "Enable local Administrator",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('Enable-LocalUser -SID S-1-5-21-2353998497-988216273-596580639-500;"Admin enabled"', 'enable local Admin...');
                                    }
                                },
                                "actSecAdminPW": {
                                    "name": "Change Admin PW",
                                    icon: function (opt, $itemElement, itemKey, item) {
                                        $itemElement.html('<span class="glyphicon glyphicon-flash" aria-hidden="true"></span> ' + item.name);
                                        return 'context-menu-icon-updated';
                                    },
                                    callback: function (itemKey, opt, rootMenu, originalEvent) {
                                        RunPS('$pw = get-random -count 12 -input (35..37 + 45..46 + 48..57 + 65..90 + 97..122) | % -begin { $aa = $null } -process {$aa += [char]$_} -end {$aa};Set-LocalUser -SID S-1-5-21-2353998497-988216273-596580639-500 -Password (ConvertTo-SecureString -String $pw -AsPlainText -Force);$pw', 'generate PW...');
                                    }
                                }
                            }
                        }
                    }
                },
                "sepx": "---------"
            }
        });

        //$('#test').on('click', function (e) {
        //    console.log('clicked', this);
        //})
    });
</script>